{"version":3,"sources":["components/Title/Title.js","components/Title/Title.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/pages/Contacts/Contacts.js"],"names":["Title","text","className","s","module","exports","ContactForm","useState","name","setName","number","setNumber","useAddNewContactMutation","addContact","contacts","useFetchContactsQuery","dispatch","useDispatch","handleChange","e","target","value","reset","form","onSubmit","obj","preventDefault","data","map","el","includes","alert","id","label","htmlFor","onChange","input","type","placeholder","pattern","title","required","Button","variant","ContactList","useSelector","getFilter","useDeleteContactMutation","deleteContact","normalizedFilter","toLowerCase","handleDelete","list","filter","contact","item","startIcon","onClick","Filter","changeFilter","useCallback","filterValue","TextField","Contacts"],"mappings":"gJACA,6BAceA,IAZD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACE,mCACE,qBAAIC,UAAWC,IAAEF,KAAjB,cAAyBA,EAAzB,W,oBCLNG,EAAOC,QAAU,CAAC,KAAO,sB,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,6B,oBCA9FD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,4B,8HCoF3CC,MA9Ef,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAqBC,cAAdC,EAAP,oBACMC,EAAWC,cACXC,EAAWC,cAEXC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,OAAlBZ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MACd,OAAQb,GACN,IAAK,OACHC,EAAQY,GACR,MACF,IAAK,SACHV,EAAUU,KAsBVC,EAAQ,WACZb,EAAQ,IACRE,EAAU,KAGZ,OACI,uBAAMT,UAAWC,IAAEoB,KAAMC,SAbR,SAACL,GAEpB,IAXqBM,EAUrBN,EAAEO,iBAVmBD,EAWL,CAAEjB,OAAME,UAVPI,EAASa,KAAKC,KAAI,SAACC,GAAD,OAAQA,EAAGrB,QAAMsB,SAASL,EAAIjB,MAElEuB,MAAM,GAAD,OAAIN,EAAIjB,KAAR,6BAEFQ,EAASH,EAAW,eAAIY,GAAMA,EAAIO,KAQpCV,KASE,UACE,uBAAOpB,UAAWC,IAAE8B,MAAOC,QAAS1B,EAAKwB,GAAzC,kBAGA,uBACEA,GAAIxB,EAAKwB,GACTG,SAAUjB,EACVhB,UAAWC,IAAEiC,MACbC,KAAK,OACL7B,KAAK,OACLa,MAAOb,EACP8B,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,IAEV,uBAAOvC,UAAWC,IAAE8B,MAAOC,QAASxB,EAAOsB,GAA3C,oBAGA,uBACEA,GAAItB,EAAOsB,GACXG,SAAUjB,EACVhB,UAAWC,IAAEiC,MACbC,KAAK,MACL7B,KAAK,SACLa,MAAOX,EACP4B,YAAY,eACZC,QAAQ,yFACRC,MAAM,ohBACNC,UAAQ,IAEV,cAACC,EAAA,EAAD,CAAQL,KAAK,SAASM,QAAQ,WAA9B,qB,4CC/BOC,EAxCK,WAClB,IAAM9B,EAAWC,cACXM,EAAQwB,YAAYC,KAC1B,EAAwBC,cAAjBC,EAAP,oBACIC,EAAmB5B,EAAM6B,cAExBC,EAAc,SAAChC,GACnB6B,EAAc7B,EAAEC,OAAOY,KAGzB,OACE,oBAAI9B,UAAWC,IAAEiD,KAAjB,SACGtC,EAASa,KACT0B,QAAO,SAACC,GAAD,OACHA,EAAQ9C,KAAK0C,cAAcpB,SAASmB,MAExCrB,KAAI,gBAAEI,EAAF,EAAEA,GAAIxB,EAAN,EAAMA,KAAME,EAAZ,EAAYA,OAAZ,OACL,qBAAaR,UAAWC,IAAEoD,KAA1B,UACK,mBAAGrD,UAAWC,IAAEF,KAAhB,SAAuBO,EAAO,MAAQE,IACvC,cAACgC,EAAA,EAAD,CAAQV,GAAKA,EACbW,QAAQ,OACRa,UAAW,cAAC,IAAD,IACXC,QAASN,EAHT,mBAFKnB,S,kBCIC0B,EAvBA,WACb,IAAMrC,EAAQwB,YAAYC,KACpB9B,EAAWC,cAEX0C,EAAeC,uBAAc,SAAAzC,GACjCH,EAAS6C,YAAY1C,EAAEC,OAAOC,UAC3B,CAACL,IAEN,OACA,mCACE,cAAC8C,EAAA,EAAD,CACA7B,MAAM,uBACNI,KAAK,SACLhB,MAAOA,EACPc,SAAUwB,OCLGI,UAVA,WACb,OACE,qCACA,cAAC/D,EAAA,EAAD,CAAOC,KAAK,aACZ,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/Contacts.ab744ff1.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport s from \"./Title.module.css\";\n\nconst Title = ({ text }) => {\n  return (\n    <>\n      <h1 className={s.text}> {text} </h1>\n      {/* {children} */}\n    </>\n  );\n};\n\nTitle.propTypes = {\n  text: PropTypes.string,\n};\nexport default Title;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Title_text__39Uar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"text\":\"ContactList_text__2dM24\"};","import * as React from 'react';\nimport s from \"./ContactForm.module.css\";\nimport { useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport Button from '@mui/material/Button';\nimport { useAddNewContactMutation, useFetchContactsQuery} from '../../redux/auth/slices';\n\nfunction ContactForm () {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [addContact] = useAddNewContactMutation();\n  const contacts = useFetchContactsQuery();\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const addNewContact = (obj) => {\n    const sameName = contacts.data.map((el) => el.name).includes(obj.name);\n    if (sameName) {\n   alert(`${obj.name} is already in contacts!`);\n    } else {\n      dispatch(addContact({...obj}, obj.id));\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const contact = { name, number };\n    addNewContact(contact)\n    reset()\n  };\n\n  const reset = ()=> {\n    setName(\"\");\n    setNumber(\"\");\n  }\n\n  return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.label} htmlFor={name.id}>\n          Name\n        </label>\n        <input\n          id={name.id}\n          onChange={handleChange}\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label className={s.label} htmlFor={number.id}>\n          Number\n        </label>\n        <input\n          id={number.id}\n          onChange={handleChange}\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать обелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n        <Button type=\"submit\" variant=\"outlined\">add</Button>\n      </form>\n  );\n}\n\nexport default ContactForm\n","import s from \"./ContactList.module.css\";\nimport { useSelector } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {useFetchContactsQuery,useDeleteContactMutation} from '../../redux/auth/slices';\n import { getFilter } from '../../redux/auth/selectors';\n\n\nconst ContactList = () => {\n  const contacts = useFetchContactsQuery();\n  const value = useSelector(getFilter);\n  const [deleteContact] = useDeleteContactMutation();\n  let normalizedFilter = value.toLowerCase();\n\n const handleDelete =(e)=> {\n   deleteContact(e.target.id)\n\n }\n return (\n   <ul className={s.list}>\n     {contacts.data\n     .filter((contact) =>\n          contact.name.toLowerCase().includes(normalizedFilter)\n          )\n     .map(({id, name, number}) => (\n     <li key={id} className={s.item}>\n          <p className={s.text}>{name + \" : \" + number}</p>\n         <Button id= {id}\n         variant=\"none\"\n         startIcon={<DeleteIcon/>}\n         onClick={handleDelete}\n         >del</Button>\n       </li>\n     ))}\n   </ul>\n )\n };\n\n  ContactList.propTypes = {\n    onDeleteContact: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n      })\n    ),\n  };\nexport default ContactList\n","import PropTypes from \"prop-types\";\nimport { useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@mui/material/TextField'\nimport {filterValue} from '../../redux/contacts/actions';\nimport { getFilter } from '../../redux/auth/selectors';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch()\n\n  const changeFilter = useCallback ( e => {\n    dispatch(filterValue(e.target.value))\n    }, [dispatch]);\n\n  return (\n  <>\n    <TextField\n    label='Find contact by name'\n    type='search'\n    value={value}\n    onChange={changeFilter} />\n  </>\n  )\n};\n\n Filter.propTypes = {\n   value: PropTypes.string,\n   onChange: PropTypes.func,\n };\nexport default Filter\n","import Title from '../../Title/Title';\nimport ContactForm from '../../ContactForm/ContactForm'\nimport ContactList from \"../../ContactList/ContactList\";\nimport Filter from \"../../Filter/Filter\";\n\n\nconst Contacts = () => {\n    return (\n      <>\n      <Title text=\"Contacts\" />\n      <ContactForm/>\n      <Filter/>\n      <ContactList/>\n      </>\n    );\n  };\n  export default Contacts;\n"],"sourceRoot":""}